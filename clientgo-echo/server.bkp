/*
package main

import (
	"database/sql"
	"fmt"
	"log"
	"net/http"
	"time"

	nested "github.com/antonfisher/nested-logrus-formatter"
	_ "github.com/go-sql-driver/mysql"
	"github.com/hfantin/clientgo-echo/utils"
	"github.com/labstack/echo"
	"github.com/labstack/echo/middleware"
	"github.com/sirupsen/logrus"
	"github.com/tylerb/graceful"
)

type Cli struct {
	ID        int             `json:"id"`
	Name      *string         `json:"name"`
	BirthDate *string         `json:"bithDate"`
	Email     *sql.NullString `json:"email"`
}

var db *sql.DB
var logger = logrus.New()

func main() {
	env := utils.Config()
	db = initDB(env)
	initLogger()

	e := echo.New()
	e.HideBanner = true
	// e.Use(middleware.Logger())
	e.Use(middleware.Recover())
	// e.Logger.SetOutput(ioutil.Discard)
	// e.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{
	// 	// Format: "${time_rfc3339} [${level}] ${short_file} ${line}\n",
	// 	// Format: "${time_rfc3339} [${level}] ${short_file} ${line}\n",
	// 	Format: "method=${method}, uri=${uri}, status=${status}\n",
	// }))

	e.Use(middleware.CORSWithConfig(middleware.CORSConfig{
		AllowOrigins: []string{"*"},
		AllowMethods: []string{echo.GET, echo.PUT, echo.POST, echo.DELETE},
	}))

	// testes logger

	/*
			logger := &logrus.Logger{
		        Out:   os.Stderr,
		        Level: logrus.DebugLevel,
		        // Formatter: &easy.Formatter{
		        //     TimestampFormat: "2006-01-02 15:04:05",
				// 	LogFormat:       "[%lvl%]: %time% - %msg%\n",
				// },
				Formatter: &prefixed.TextFormatter{
		            DisableColors: false,
		            TimestampFormat : "2006-01-02 15:04:05",
		            FullTimestamp:true,
		            ForceFormatting: true,
		        },
			}
	* /

	// e.GET("/v1/clients/:id", func(c echo.Context) error {
	// 	requested_id := c.Param("id")
	// 	fmt.Println(requested_id)
	e.GET("/v1/clients", getClients)

	e.Server.Addr = ":" + env.ServerPort
	logger.Info("Starting clientgo-echo server on port ", env.ServerPort)
	graceful.ListenAndServe(e.Server, 5*time.Second)

}

// loggger https://github.com/antonfisher/nested-logrus-formatter
func initLogger() {
	logger.SetLevel(logrus.DebugLevel)
	logger.SetFormatter(&nested.Formatter{
		TimestampFormat: "2006-01-02 15:04:05",
		HideKeys:        true,
		ShowFullLevel:   true,
		FieldsOrder:     []string{"component", "category"},
	})
}
func initDB(env utils.Environment) *sql.DB {
	dbUri := fmt.Sprintf("%s:%s@tcp(%s)/%s", env.DBUser, env.DBPass, env.DBHost, env.DBName)
	db, err := sql.Open("mysql", dbUri)
	if err != nil {
		log.Fatal(err)
	}
	db.SetMaxOpenConns(10)
	db.SetMaxIdleConns(5)
	return db
}

func getClients(ctx echo.Context) error {
	// logger.Info("get clients")
	rows, err := db.Query("SELECT * FROM CLI")
	if err != nil {
		logger.Error("Falha ao executar query de clientes: ", err)
		// return err
		// https://golang.org/src/net/http/status.go
		return ctx.JSON(http.StatusBadRequest, err)
	}
	defer rows.Close()
	clients := make([]Cli, 0)
	for rows.Next() {
		cli := Cli{}
		if err := rows.Scan(&cli.ID, &cli.Name, &cli.BirthDate, &cli.Email); err != nil {
			logger.Error("Falha ao executar ler cursor de clientes: ", err)
			// return err
			return ctx.JSON(http.StatusBadRequest, err)
		}
		clients = append(clients, cli)
	}

	return ctx.JSON(http.StatusOK, clients)
}

*/